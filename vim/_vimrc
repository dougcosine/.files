" sources
  exec "source " . expand('<sfile>:p:h') . "/vimrc_example.vim"

" settings
  behave xterm
  colorscheme slate         "change colors
  " for some reason PreProc(essing) gets highlighted red on white by default.
  " this makes it orange on gray
  hi PreProc guifg=orange guibg=#505050
  set gfn=Consolas:h9:cANSI "change font
  set expandtab             "convert \t characters to spaces
  set tabstop=2             "this and the following two lines
  set shiftwidth=2          "set the size of 'tabs' to 2 spaces
  set softtabstop=2
  set cindent               "enable C style indentation
  set cinkeys-=0#           "don't reset '#' comment lines to 0 indentation
  set indentkeys-=0#        "don't reset '#' comment lines to 0 indentation
  set mouse=                "disable crutch interaction
  set fdm=indent            "fold method (how folds are recognized)
  set foldignore=           "was '#' allow comment folding
  set clipboard=unnamed     "use windows' clipboard???
  set guioptions-=m         "remove menu bar
  set guioptions-=T         "remove toolbar
  set guioptions-=R         "remove scroll bars (next 4 lines)
  set guioptions-=r
  set guioptions-=L
  set guioptions-=l
  set guioptions-=e         "remove gui tab labels
  set formatoptions+=j      "remove comment leader when joining lines
  set numberwidth=2         "minimum number of columns to display line numbers
  set shellslash            "use as separator for file paths
  set backup                "keep a backup file
  set history=10000         "keep 50 lines of command line history
  set ruler                 "show the cursor position all the time
  set showcmd               "display incomplete commands
  set incsearch             "do incremental searching
  set fileformat=unix       "use unix style line endings
  set fileformats=unix,dos  "no, really! use unix style line endings
  syntax on                 "switch syntax highlighting on
  set hlsearch              "highlight the last used search pattern
  "use file's location as working directory for shell commands
  set autochdir
  " allow backspacing over everything in insert mode
  set backspace=indent,eol,start
  " backspace, space, h, and l keys wrap to previous/next line
  set whichwrap+=bs
  " disable bell
  set vb t_vb=
  " enable the saving and restoring of screen positions.
  let g:screen_size_restore_pos = 1
  " To save and restore screen for each Vim instance.
  " This is useful if you routinely run more than one Vim instance.
  " For all Vim to use the same settings, change this to 0.
  let g:screen_size_by_vim_instance = 1

" if you want to run some command that moves the screen or unfolds folds
" but you want the screen and cursor in their original positions when
" you're done, then you can use this?
" cmd is a string that gets passed to execute
" StacicViewCall(":0")
" this would bring you to the first line... and then send you right back
" hopefully we can think of some better uses of this function /:
function! StaticViewCall(cmd)
  let screen = winsaveview() " save current screen/cursor state
  set nofoldenable           " disable folding so folds aren't opened
  execute a:cmd            | " run the supplied command
  set foldenable             " reenable folding
  call winrestview(screen)   " restore screen/cursor state
endfunction

" moves you to the first non whitespace character of the line
" if you were already there, moves you to the first character if the line
function! LineHome(mode)
  let isVisual = a:mode == 'v'
  if isVisual
    execute "normal! \<esc>"
    let colCurr = col('.')
    execute "normal! ^"
    if colCurr == col('.')
      execute "normal! gv0"
    else
      execute "normal! gv^"
    endif
  else
    let colCurr  = col('.')
    execute "normal! ^"
    if colCurr == col('.')
      execute "normal! 0"
    endif
  endif
  return ""
endfunction

" switches to diff mode and compares the current buffer to the version last
" saved in the filesystem.
" Usage: ':DiffSaved' to start
"        ':diffoff' or ':diffo' and close the 'Scratch' window to end
function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

" strips trailing whitespace if b:noStripWhitespace is not set
" you will want to call noh after this function to turn of highlighting
" Usage: StripTrailingWhitespace | noh
fun! StripTrailingWhitespace()
  if !exists('b:noStripWhitespace')
    %s/\s\+$//e
  endif
endfun

" converts coast confirmation into format that can be imported into excel to
" compare with a PO
" Usage: call ProcessCoastConfirmation()
fun! ProcessCoastConfirmation()
  silent! %s/^\s*//g
  silent! g/^$/d
  silent! %s,^\(\%(\d\+\s\+\)\{3\}[0-9a-zA-Z]\+\)\( .*\n.* \(\S\+\)".*"\),\1\3\2,g
  silent! %s,^\(\%(\d\+\s\+\)\{3\}[0-9a-zA-Z]\+\)\( .*\n.*\S \)\( \+\d\+\.\d\+\n\)\(.*PVC.*\)\n,\1PVC\2\4\3,g
  silent! %s/\%(".* \)\@<=\(\S*"\)\(.*\S \)\( *\d\+\.\d\+$\)/\2\1\3/g
  silent! g/^\d\+ \+\d/normal! J
  silent! g/Attn:  DOUG COULSON/d
  silent! v/^\d\+ \+\d/d
	setlocal noexpandtab
  silent! v/^$/execute "normal! f cw	\<esc>f .f .f .f .f ./ \\S\\+['\"][^'\"]*$\<cr>ciw		\<esc>/['\"]\<cr>xcw	\<esc>"
	setlocal expandtab<
endfun

" converts ryerson confirmation into format that can be imported into excel to
" compare with a PO
" Usage: call ProcessRyersonConfirmation()
fun! ProcessRyersonConfirmation()
  silent! %s/,//g
  silent! %s/ RL//g
  silent! %s,5052 H32 \(B/W FLM\)\@!\(\(.*\n\)\{3}.*B/W FLM\),5052 H32 B/W FLM \2,g
  silent! g/^$/d
  silent! v/\d\+ \d\+ PC\|\(\d\+ \d\+ PC.*\n\)\@<=.\|Extended Amount/d
	setlocal noexpandtab
  silent! g/^\d\+ \d\+/execute "normal! f r	f .wdwd/\\d\\+\\.\<cr>Jr	p^f df$dt	A	\<esc>pbD\"_xF	pa	\<esc>F wd/\\D\<cr>A				\<esc>PJdf$"
	setlocal expandtab<
endfun

" converts nucor confirmation into format that can be imported into excel to
" compare with a PO
" Usage: call ProcessNucorConfirmation()
fun! ProcessNucorConfirmation()
  silent! %s/,//g
  silent! v/^[US]1 \d*\|^ \?[A-Z0-9]\+ \d\+'/d
	setlocal noexpandtab
  silent! g/^[US]1 \d*/execute "normal! d2wf s		\<esc>/ T\\d\<cr>c2w	\<esc>dF	f r	Pa	\<esc>;r	;DJder	df'r	/ PP\<cr>PDa	\<esc>"
	setlocal expandtab<
endfun

"
" converts Samuel confirmation into format that can be imported into excel to
" compare with a PO
" Usage: call ProcessSamuelConfirmation()
fun! ProcessSamuelConfirmation()
  let isInvoice = 0
  if search('Inv date', 'cnw')
    let isInvoice = 1
  endif
  silent! %s/,//g
  silent! %s/^ *//g
  silent! v/^\d\+\|^Est Wgt/d
  silent! g/18201 N.E. PORTAL WAY/d
  silent! %s/"\? \(RL RDM\|R\|RL\|R\|RD\|RDM\)[ "]/" /g
  silent! %s/" \(RL RDM\|R\|RL\|R\|RD\|RDM\)\+[ "]/" /g
  silent! %s/ Plate//g
	setlocal noexpandtab
  " if this is an invoice, process one way.  otherwise process as an invoice
  if isInvoice
    v/^\d\+SS/d
		silent! g/^\d/execute "normal! i	\<esc>fS2.$F\"xF s					\<esc>f c2W	\<esc>"
	else
    silent! %s/\d\@<= \( *\S*$\)\@=/"/g
		silent! g/^\d/execute "normal! f cw	\<esc>Jd/\\d\<cr>de^f i	\<esc>plc2w	\<esc>/['\"][^'\"]*$\<cr>dwdBF r	El\"_c/\\d\<cr>			\<esc>pa	\<esc>F/r	dt	F	P"
	endif
	"setlocal expandtab<
endfun

"
" converts Sapa confirmation into format that can be imported into excel to
" compare with a PO
" Usage: call ProcessSapaConfirmation()
fun! ProcessSapaConfirmation()
  let isInvoice = 0
  if search('^Invoice.#', 'cnw')
    let isInvoice = 1
  endif
  silent! %s/,//g
  silent! %s/ / /g
  silent! %s/­/-/g
  silent! %s/\(023974_\d\+\)/\1 CE23974 AL/g
  silent! %s/\(023973_\d\+\)/\1 CE23973 AL/g
  silent! g/^\s*$/d
  silent! %s/^\(\d\+\.\d\+ \)\(.*\n.*\n.*\nLin.Ft:.*\)\D\(\d\+\)$/\1\3 \2/g
  silent! v/^\d\+\|^Est Wgt/d
  silent! g/^4249$/d
  silent! g/^3900 EAST BROADWAY$/d
  silent! g/^7933 N/d
  setlocal noexpandtab
  " if this is an invoice, process one way.  otherwise process as an invoice
  if isInvoice
    silent! %s/^\(\d\+\.\d\+ \d\+ \d\+\) .*\(\(\s\S\+\)\{6\}\)$/\1\2/g
    silent! g/^\d\+\./execute "normal! f.dt r	f ./\\d\\+ LBS\<cr>dwF	pr	f DJ\"_DJ\"_xf \"_Dp^f dt r	f \"_der	f PF s			\<esc>f r	"
  else
    silent! g/^\d\+\./execute "normal! f r	/\\(\\d\\+\\/\\d\\+\\/\\d\\+ \\)\\@<=\<cr>d3wF	pF r	deel\"_d/\\d\\+\\.\<cr>Pa	\<esc>2F	ldwf r	pr	$BDF	pa	\<esc>f DT	DJ\"_dW$F \"_DJr	f r	pa	\<esc>lD2F	lyt	^4f	P"
  endif
  setlocal expandtab<
endfun

"
" converts consumption reports into format that can be imported into
" excel to compare with a confirmation.  The filename will be the PO
" number for a different filename, pass a string to be appended after
" the number but before the extension
" Usage: call ProcessConsumption(u)
fun! ProcessConsumption()
	setlocal noexpandtab
  silent! %s/^Cd\'A METALS.*\n.*\n//g
  silent! %s/^.*INCLUDE POs:.*\n.*\n.*\n.*\n.*\n.*\n//g
  silent! %s/^\(Mo Avg.*\n\).*\n/\1/g
  silent! %s/^Hgh Mo.*\n.*\n//g
  silent! g/^\d/d
  silent! g/^ MS/d
  silent! g/^\s*$/d
  silent! g/^ *NEXT: /d
  silent! g/^ *calculating\.\.\. /d
  silent! g/^SIZE:/normal! d6lWdWelDJd2eelDJdeElD
  silent! %s/ \+/	/g
	setlocal expandtab<
endfun

"
" converts PO into format that can be imported into excel to
" compare with a confirmation.  The filename will be the PO number
" for a different filename, pass a string to be appended after the
" number but before the extension
" Usage: call ProcessPO('u')
fun! ProcessPO(...)
  let poNumber = matchstr(getline(1), '\(PO# \)\@<=\d\{6\}')
  " if an argument was supplied, append it to the PO number
  if a:0 > 0
    let poNumber .= a:1
  endif
  let fileName = '/Users/Doug/Documents/POs/' . poNumber . '.csv'
  setlocal noexpandtab
  silent! g/^ *\d\+ I/normal! J
  silent! v/^ *\d\+ I/d
  silent! g//normal! 4|r	2l.8l.21l.5l.8l.9l.10l.11l.7l.2l.11l.7l.9l.15l.
  silent! %s/^ *//g
  silent! %s/ *	 */	/g
  if poNumber != ''
    execute 'saveas' fileName
  endif
	setlocal expandtab<
endfun

" converts coast confirmation into format that can be imported into excel to
" compare with a PO
" Usage: call ProcessCoastConfirmation()
fun! ProcessInditalInvoice()
  silent! %s/,//g
  silent! %s/\d\+\.\d\d\( \d\+\.\d\d\n\).*\n \S* \(.*\)\n/\2\1/g
  silent! v/EACH\|Freight:/d
  silent! g/ 0.00$/d
  setlocal noexpandtab
  silent! v/Freight:/execute "normal! 2Wdwwdwdb0PI	\<esc>f s		\<esc>f r	f r	f s				\<esc>"
  silent! g/Freight:/execute "normal! i	1		\<esc>f:cf 						"
	setlocal expandtab<
endfun

" converts coast confirmation into format that can be imported into excel to
" compare with a PO
" Usage: call ProcessCoastConfirmation()
fun! ProcessCoastInvoice()
  silent! %s/['"]//g
  silent! v/^\d\+ .[A-Z0-9]\+/d
  setlocal noexpandtab
  silent! g//execute "normal! f dawr	$2F ?\\d\<cr>a \<esc>P3F dF \"_dF	$F PBi  \<esc>"
  silent! %s/ /	/g
	setlocal expandtab<
endfun

"
" converts Sapa confirmation into format that can be imported into excel to
" compare with a PO
" Usage: call ProcessSapaConfirmation()
fun! ProcessSapaStuff()
  silent! %s/,//g
  silent! g/^\w*$/d
  silent! v/^\d\+\.\d\+/d
  silent! g/^/execute "normal! dWelc/\\(\\d\\+\\/\\d\\+\\/\\d\\+ \\)\\@<=\\d\<cr>,\<esc>f r,;D"
endfun

fun! ProcessQuantity()
  silent! v/\S/d
  silent! g//execute 'normal! f	r11AA+-'
  silent! %y
endfun

fun! ProcessPrices()
  silent! v/\S/d
  silent! g//execute 'normal! Ipf	r$2A'
  silent! %y
endfun

fun! ProcessUnitPrices()
  silent! v/\S/d
  silent! g//execute 'normal! Ipf	rA'
  silent! %y
endfun

" pathogen
execute pathogen#infect()

" EasyMotion
  let g:EasyMotion_smartcase = 1
  let g:EasyMotion_leader_key = 'm'
  let g:EasyMotion_keys='asonidetuh'
  nmap     m  <Plug>(easymotion-prefix)
  nmap     mw <Plug>(easymotion-bd-w)
  nmap     mW <Plug>(easymotion-bd-W)
  nmap     me <Plug>(easymotion-bd-e)
  nmap     mE <Plug>(easymotion-bd-E)
  nmap     mj <Plug>(easymotion-j)
  nmap     mk <Plug>(easymotion-k)
  nmap     ml <Plug>(easymotion-lineforward)
  nmap     mh <Plug>(easymotion-linebackward)
  nnoremap my y``
  nnoremap mY y''
  nnoremap mc c``
  nnoremap mC c''
  nnoremap md ``d``
  nnoremap mD ''d''
  nnoremap m= ``=``
  " look into changing where the cursor ends up with indentation
  " so these actions will be repeatable.
  nnoremap m>  ``>``
  nnoremap m<  ``<``
  nnoremap mgu ``gu``
  nnoremap mgU ``gU``
  nmap     /   <Plug>(easymotion-sn)
  nmap     n   <Plug>(easymotion-next)
  nmap     N   <Plug>(easymotion-prev)
  " remap vanilla search commands
  noremap  m/ /
  noremap  mn n
  noremap  mN N

" autocmds
  " set noStripWhiteSpace for pdf files
  autocmd FileType pdf let b:noStripWhitespace=1
  " strip white space from line endings on save
  au BufWritePre * call StripTrailingWhitespace() | noh
  " start in insert mode for git commit messages
  au FileType gitcommit 1 | startinsert | :redraw
  " set some cobol extensions
  au BufRead,BufNewFile *.dc,*.fd,*.nm,*.sl,*.wk set ft=cobol
  " set the term variable and colorscheme (fixes coloring on backup server)
  if !has("gui_running")
    au VimEnter * :set term=ansi | :colo slate
  endif
  " If doing a diff. Upon writing changes to file, automatically update the
  " differences http://vim.wikia.com/wiki/Update_the_diff_view_automatically
  if &diff
    au BufWritePost * diffupdate
  endif

" mark
  " make M initiate setting marks, since I remapped m to EasyMotion's leader
  nnoremap M m

" diff specific
  if &diff
    " if we're in diff mode map ctrl+l to turn off search highlighting,
    " refresh syntax highlighting, and refresh the diff
    nnoremap <c-l> :noh<cr>:sil! syn-sync-first<cr>:diffu<cr>
    vnoremap <c-l> <c-c>:noh<cr>:sil! syn-sync-first<cr>:diffu<cr>gv
    inoremap <c-l> <c-o>:noh<cr><c-o>:sil! syn-sync-first<cr><c-o>:diffu<cr>
    " maximize the window
    au GUIEnter * simalt ~x
    " remap fold navigation to diff navigation
    noremap  zj    ]c
    noremap  zk    [c
  else
    " if we're not in diff mode, just map ctrl+l to turn off search
    " highlighting and refresh syntax highlighting
    nnoremap <c-l> :noh<cr>:silent! syntax sync fromstart<cr>
    vnoremap <c-l> <c-c>:noh<cr>:silent! syntax sync fromstart<cr>gv
    inoremap <c-l> <c-o>:noh<cr><c-o>:silent! syntax sync fromstart<cr>
  endif

" leaders
  map <space> <nop>
  let mapleader = "\<space>"
  map - <localleader>
  let maplocalleader = "-"

" commands
  " Alt-Space is System menu
  if has("gui")
    noremap  <a-space> :simalt ~<cr>
    inoremap <a-space> <c-o>:simalt ~<cr>
    cnoremap <a-space> <c-c>:simalt ~<cr>
  endif

  " quick edit my vimrc in new tab
  nnoremap <leader>ek :tabnew $MYVIMRC<cr>
  " quick edit my vimrc in vertical split
  nnoremap <leader>vk :vnew $MYVIMRC<cr>
  " quick source my vimrc
  nnoremap <leader>ok :source $MYVIMRC<cr>

  " map ; to : in mode so it's easier to input commands
  noremap ; :
  " map q; to q: so we can get to the command editor
  noremap q; q:
  " map m; to ; so we can repeat tTfF searches
  noremap m; ;

  " map escape to remove search highlighting in normal mode
  nnoremap <esc> :noh<cr>

  " map forward and backward window switching in normal, visual, command
  " pending, and insert modes
  noremap  <leader>, <c-w>w
  nnoremap <leader>< <c-w>W

  " map f10 to echo the syntax groups the character under the cursor matches
  map <f10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name")
      \ . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" cursor movement
  " move to end of line with L
  noremap  L $
  " move to first non whitespace character of line with H
  " if you were already there, move to first character of line
  noremap  H :call LineHome('n')<cr>:echo<cr>
  vnoremap H :<c-u>call LineHome('v')<cr>

" modal operators
  " map escape to leave insert and visual modes and also remove highlighting
  inoremap <esc> <esc>:noh<cr>
  vnoremap <esc> <esc>:noh<cr>

" text movement
  " move line under cursor down one line
  nnoremap <leader>- "zdd"zp
  " move line under cursor up one line
  nnoremap <leader>_ "zddk"zP

" tabs
  nnoremap <leader>k gt
  nnoremap <leader>j gT
  nnoremap <leader>t :tabnew<space>

" general text editing
  " surround word under cursor with various enclosing marks
  nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
  nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
  nnoremap <leader>( viw<esc>a)<esc>hbi(<esc>lel
  nnoremap <leader>[ viw<esc>a]<esc>hbi[<esc>lel
  nnoremap <leader>{ viw<esc>a}<esc>hbi{<esc>lel

  " leader followed by text removal deletes to nameless register
  nnoremap <leader>d  "_d
  nnoremap <leader>dd "_dd
  nnoremap <leader>x  "_x
  nnoremap <leader>c  "_c
  nnoremap <leader>s  "_s
  nnoremap <leader>D  "_D
  nnoremap <leader>X  "_X
  nnoremap <leader>C  "_C
  nnoremap <leader>S  "_S

  " backspace in Visual mode deletes selection
  vnoremap <BS> d

" <nop>
  " Don't use Ex mode
  noremap Q <nop>

  " Don't use arrow keys
  noremap  <Left>  <nop>
  inoremap <Left>  <nop>
  noremap  <Right> <nop>
  inoremap <Right> <nop>
  noremap  <Up>    <nop>
  inoremap <Up>    <nop>
  noremap  <Down>  <nop>
  inoremap <Down>  <nop>

" abbreviations
  iabbrev @@ dougcosine@gmail.com
  iabbrev ssig -- <cr>Doug Coulson<cr>dougcosine@gmail.com

" specific text editing
  " readies price update from excel for anzio
  nnoremap <c-p> :call ProcessPrices()<cr>
  nnoremap <c-o> :call ProcessUnitPrices()<cr>
  nnoremap <c-i> :call ProcessQuantity()<cr>

  " adds title metadata on next line, leave us ready to type the title
  nnoremap <c-k> /<<no/Title ()<esc>i







" restore size script from http://vim.wikia.com/wiki/Restore_screen_size_and_position
if has("gui_running")
  function! ScreenFilename()
    if has('amiga')
      return "s:.vimsize"
    elseif has('win32')
      return $HOME.'\_vimsize'
    else
      return $HOME.'/.vimsize'
    endif
  endfunction

  function! ScreenRestore()
    " Restore window size (columns and lines) and position
    " from values stored in vimsize file.
    " Must set font first so columns and lines are based on font size.
    let f = ScreenFilename()
    if has("gui_running") && g:screen_size_restore_pos && filereadable(f)
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      for line in readfile(f)
        let sizepos = split(line)
        if len(sizepos) == 5 && sizepos[0] == vim_instance
          silent! execute "set columns=".sizepos[1]." lines=".sizepos[2]
          silent! execute "winpos ".sizepos[3]." ".sizepos[4]
          return
        endif
      endfor
    endif
  endfunction

  function! ScreenSave()
    " Save window size and position.
    if has("gui_running") && g:screen_size_restore_pos
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      let data = vim_instance . ' ' . &columns . ' ' . &lines . ' ' .
            \ (getwinposx()<0?0:getwinposx()) . ' ' .
            \ (getwinposy()<0?0:getwinposy())
      let f = ScreenFilename()
      if filereadable(f)
        let lines = readfile(f)
        call filter(lines, "v:val !~ '^" . vim_instance . "\\>'")
        call add(lines, data)
      else
        let lines = [data]
      endif
      call writefile(lines, f)
    endif
  endfunction

  if !exists('g:screen_size_restore_pos')
    let g:screen_size_restore_pos = 1
  endif
  if !exists('g:screen_size_by_vim_instance')
    let g:screen_size_by_vim_instance = 1
  endif
  autocmd VimEnter * if g:screen_size_restore_pos == 1 | call ScreenRestore() | endif
  autocmd VimLeavePre * if g:screen_size_restore_pos == 1 | call ScreenSave() | endif
endif

" clears highlighting that pops up when vimrc is loaded mid session
noh

